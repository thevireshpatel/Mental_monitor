@model IEnumerable<Entry>

<canvas id="emotionTrend" height="120"></canvas>

<script>
    // flatten to day / joy / sadness
    const raw = @Html.Raw(Json.Serialize(
        Model.Select(e => new {
            Day = e.CreatedAt.ToString("yyyy-MM-dd"),
            Joy  = e.EmotionScores.FirstOrDefault(s => s.EmotionLabel == "joy")?.Score ?? 0,
            Sad  = e.EmotionScores.FirstOrDefault(s => s.EmotionLabel == "sadness")?.Score ?? 0
        }).OrderBy(x => x.Day))
    ));

    const labels = [...new Set(raw.map(r => r.day))];
    const joyAvg = labels.map(d => avg(raw.filter(r => r.day === d).map(r => r.joy)));
    const sadAvg = labels.map(d => avg(raw.filter(r => r.day === d).map(r => r.sad)));

    function avg(arr) { return arr.length ? arr.reduce((a,b) => a+b,0)/arr.length : 0; }

    new Chart(document.getElementById('emotionTrend'), {
        type: 'line',
        data: {
            labels: labels,
            datasets: [
                {
                    label: 'Joy',
                    data: joyAvg,
                    borderColor: '#28a745',
                    backgroundColor: 'rgba(40,167,69,.1)',
                    tension: 0.3
                },
                {
                    label: 'Sadness',
                    data: sadAvg,
                    borderColor: '#dc3545',
                    backgroundColor: 'rgba(220,53,69,.1)',
                    tension: 0.3
                }
            ]
        },
        options: {
            responsive: true,
            plugins: { legend: { position: 'top' } },
            scales: { y: { beginAtZero: true, max: 1 } }
        }
    });
</script>